function run031611()
global pdStim screen

try
    CreateStimuliLogStart();
    
    
    % Define the rectangles
    [centerX, centerY] = Screen('WindowSize', max(Screen('Screens')));
    center1 =[centerX centerY]/2;

    leftCenter = center1-[192/2 0];
    rightCenter = center1+[192/2 0];
    
    objRect1 = GetRects(192, center1);
    objRect2(1,:) = GetRects(16, leftCenter);
    objRect2(2,:) = GetRects(32, leftCenter);
    objRect2(3,:) = GetRects(64, leftCenter);
    objRect2(4,:) = GetRects(128, leftCenter);
    objRect2(5,:) = GetRects(16, rightCenter);
    objRect2(6,:) = GetRects(32, rightCenter);
    objRect2(7,:) = GetRects(64, rightCenter);
    objRect2(8,:) = GetRects(128, rightCenter);
    
    barsWidth = 8;
    backTex = GetBarsTex(768, barsWidth, screen, 1);
    
    % some definitions needed for the natural scene stimuli
    objSize = 192;
    imSize = 768;
    textures = LoadAllTextures(0, '../Images/');
    maskTex = GetMaskTexture(imSize/2, objSize, screen, [6 12 18 24]);
    objSeed = 3;
    S1 = RandStream('mcg16807', 'Seed', objSeed);
    jitter = randi(S1, 3, 1, 60)-2;
    clear S1

    Wait2Start('debugging',0)

    % record for 1000 + 500*2 + 7200 + 800 = 10000 seconds
    
    pdStim = 0;
    pause(1)
    RF( ...
        'movieDurationSecs', 1000, ...
        'barsWidth',16, ...
        'objContrast',1, ...
        'waitFrames', 1 ...
        );

    
    pdStim = p;
    pause(1)
    UflickerObj( ...
        'objContrast', [.12 1 .24 .06 .03], ...     % I put the contrasts in this order so that they will be shown (after randommization) in order of increasing contrast.
        'rects', objRect1, ...
        'backMode', [0 0 1 0], ...
        'backTexture', backTex, ...
        'barsWidth', barsWidth, ...
        'backReverseFreq', 1, ...
        'backJitterPeriod', 1, ...
        'objJitterPeriod', 100, ...
        'presentationLength', 100, ...
        'movieDurationSecs', 500 ...
        );
    
    pdStim = 2;
    pause(1)
    UflickerObj( ...
        'objContrast', [.03 .06 .12 .24 1], ... 
        'rects', objRect1, ...
        'backMode', [0 0 1 0], ...
        'backTexture', backTex, ...
        'barsWidth', barsWidth, ...
        'backReverseFreq', 1, ...
        'backJitterPeriod', 1, ...
        'objJitterPeriod', .5, ...
        'presentationLength', .5, ...
        'movieDurationSecs', 500 ...
        );
    
    for i=1:size(objRect2, 1)
        pause(1)
        pdStim = pdStim + 1;
        UflickerObjInverted( ...
            'objContrast', .03, ...
            'rects', objRect2(i, :), ...
            'backMode', [0 0 1 0], ...
            'backTexture', backTex, ...
            'backReverseFreq', 1, ...
            'backJitterPeriod', 1, ...
            'barsWidth', barsWidth, ...
            'objJitterPeriod', 100, ...
            'presentationLength', 100, ...
            'movieDurationSecs', 100, ...
            'waitframes', 1 ...
            );
    end


    % Natural scene version of the ski doesn't dissapear. (800 secs total)
    objMode = 2;
    presentationsN = 400;
    pause(1)
    pdStim = pdStim+1;
    objSeed = JitterAllTextures(textures, maskTex, objSeed, ...
        presentationsN, jitter, objSize, imSize/2, objMode);

        
    CreateStimuliLogWrite();

catch
    FinishExperiment();
    psychrethrow(psychlasterror);
end %try..catch..
end

function maskTex = GetMaskTexture(halfImageSize, objSize,  screen, alphaIn)
    % Create a single gaussian transparency mask and store it to a texture:
    % The mask must have the same size as the visible size of the grating
    % to fully cover it. Here we must define it in 2 dimensions and can't
    % get easily away with one single row of pixels.
    %
    % We create a  two-layer texture: One unused luminance channel which we
    % just fill with the same color as the background color of the screen
    % 'gray'. The transparency (aka alpha) channel is filled with a
    % gaussian (exp()) aperture mask:
    mask=ones(2*halfImageSize+1, 2*halfImageSize+1, 2) * screen.gray;
    [x,y]=meshgrid(-1*halfImageSize:1*halfImageSize,-1*halfImageSize:1*halfImageSize);
    % mask == 0 is opaque, mask == 255 is transparent
    maskTex = cell(1, length(alphaIn));
    for alphaOut=255:255:255
        for i = 1:length(alphaIn)
            mask(:, :, 2) = (abs(x)<objSize/2 & abs(y)<objSize/2)*(alphaIn(i)-alphaOut) + alphaOut;
            maskTex{i}=Screen('MakeTexture', screen.w, mask);
        end
    end
end

