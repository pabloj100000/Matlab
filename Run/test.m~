function test()
global pdStim screen

try
    CreateStimuliLogStart();
    
    
    % Define the rectangles
    [centerX, centerY] = Screen('WindowSize', max(Screen('Screens')));
    center1 =[centerX centerY]/2;
    leftCenter = center1-[192/2 0];
    rightCenter = center1+[192/2 0];
    
    objRect1(1,:) = GetRects(16, leftCenter);
    objRect2(1,:) = GetRects(16, leftCenter);
    objRect3(1,:) = GetRects(16, leftCenter);
    objRect4(1,:) = GetRects(16, leftCenter);
    objRect = SetRect(0,0,31, 31);
    objRect1(2,:) = CenterRect(objRect, objRect1(1,:));
    objRect = SetRect(0,0,63, 63);
    objRect1(3,:) = CenterRect(objRect, objRect1(1,:));
    objRect = SetRect(0,0,127, 127);
    objRect1(4,:) = CenterRect(objRect, objRect1(1,:));
    objRect1(5,:) = OffsetRect(objRect1(1,:), 2*step, 0);
    objRect1(6,:) = OffsetRect(objRect1(2,:), 2*step, 0);
    objRect1(7,:) = OffsetRect(objRect1(3,:), 2*step, 0);
    objRect1(8,:) = OffsetRect(objRect1(4,:), 2*step, 0);
    
    
    Wait2Start('debugging',0)

    % record for 1000 + 500*2 + 7200 + 800 = 10000 seconds
    
    pdStim = 0;

    
    barsWidth=8;
    backTex = GetBarsTex(768, barsWidth, screen, 1);
    for i=1:size(objRect1, 1)
        pause(1)
        pdStim = pdStim + 1;
        UflickerObjInverted( ...
            'objContrast', .03, ...
            'rects', objRect1(i, :), ...
            'backMode', [0 0 1 0], ...
            'backTexture', backTex, ...
            'backReverseFreq', 1, ...
            'backJitterPeriod', 1, ...
            'barsWidth', barsWidth, ...
            'objJitterPeriod', 10, ...
            'presentationLength', 10, ...
            'movieDurationSecs', 10, ...
            'waitframes', 1 ...
            );
    end
        
    CreateStimuliLogWrite();

catch
    FinishExperiment();
    psychrethrow(psychlasterror);
end %try..catch..
end

function maskTex = GetMaskTexture(halfImageSize, objSize,  screen, alphaIn)
    % Create a single gaussian transparency mask and store it to a texture:
    % The mask must have the same size as the visible size of the grating
    % to fully cover it. Here we must define it in 2 dimensions and can't
    % get easily away with one single row of pixels.
    %
    % We create a  two-layer texture: One unused luminance channel which we
    % just fill with the same color as the background color of the screen
    % 'gray'. The transparency (aka alpha) channel is filled with a
    % gaussian (exp()) aperture mask:
    mask=ones(2*halfImageSize+1, 2*halfImageSize+1, 2) * screen.gray;
    [x,y]=meshgrid(-1*halfImageSize:1*halfImageSize,-1*halfImageSize:1*halfImageSize);
    % mask == 0 is opaque, mask == 255 is transparent
    maskTex = cell(1, length(alphaIn));
    for alphaOut=255:255:255
        for i = 1:length(alphaIn)
            mask(:, :, 2) = (abs(x)<objSize/2 & abs(y)<objSize/2)*(alphaIn(i)-alphaOut) + alphaOut;
            maskTex{i}=Screen('MakeTexture', screen.w, mask);
        end
    end
end

