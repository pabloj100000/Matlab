function nextSeed = JitterAllTextures(textures, objSeed, alphaIn, ...
    presentationsN, jitter, objSize, imSize, objColor, objMode)
    global screen pdStim vbl
    
    if (isempty(pdStim))
        pdStim=0;
    end
    
    if (isempty(vbl))
        vbl=0;
    end
    
    framesN = length(jitter);
  
%    textures = LoadAllTextures(debugging, '../Images/');
    
    % Define the PD box
    pd = SetRect(0,0, 100, 100);
    pd = CenterRectOnPoint(pd, screen.rect(3)*.95, screen.rect(4)*.15);

    % Get 1sec random jitter (60 frames per sec)
%    S1 = RandStream('mcg16807', 'Seed', objSeed);
%    jitter = randi(S1, 3, 1, framesN)-2;
%    clear S1

    imSize = imSize/2;   % actuall, half the image size

    % Create a single gaussian transparency mask and store it to a texture:
    % The mask must have the same size as the visible size of the grating
    % to fully cover it. Here we must define it in 2 dimensions and can't
    % get easily away with one single row of pixels.
    %
    % We create a  two-layer texture: One unused luminance channel which we
    % just fill with the same color as the background color of the screen
    % 'gray'. The transparency (aka alpha) channel is filled with a
    % gaussian (exp()) aperture mask:
    mask=ones(2*imSize+1, 2*imSize+1, 2) * screen.gray;
    [x,y]=meshgrid(-1*imSize:1*imSize,-1*imSize:1*imSize);
    % mask == 0 is opaque, mask == 255 is transparent
    i=1;
    for alphaOut=255:255:255
%        for alphaIn=0:63:255
            mask(:, :, 2) = (abs(x)<objSize & abs(y)<objSize)*(alphaIn-alphaOut) + alphaOut;
            maskTex{i}=Screen('MakeTexture', screen.w, mask);
            i = i+1;
%        end
    end
    clear x y mask

    % Get rect for objMode=2
    objRectOri = SetRect(0,0,objSize,objSize);
    objRectOr = CenterRect(objRect, screen.rect);
    
    % Get order of images and masks
    S1 = RandStream('mcg16807', 'Seed',objSeed);
    order=randperm(S1, presentationsN);
    imOrder = mod(order, length(textures))+1;
    maskOrder = mod(order, length(maskTex))+1;
    nextSeed = S1.State;
    
%    destRectOri = [0 0 2*imSize-1 2*imSize-1];
    destRectOri = GetRects(2*imSize, [screen.rect(3) screen.rect(4)]/2);
    sourceRectOri = [0 0 2*imSize-1 2*imSize-1];
    angle = 0;
    
    Screen('TextSize', screen.w,12);

    for i=1:presentationsN
        destRect = destRectOri;
        sourceRect = sourceRectOri;
        objRect = objRectOri;
        for frame = 0:framesN-1    % for every frame
            destRect = destRect + jitter(frame+1)*[1 0 1 0];
            objRect = objRect + jitter(frame+1)*[1 0 1 0];
            
            switch objMode
                case 0
                    Screen('DrawTexture', screen.w, textures{imOrder(i)}, sourceRect, destRect, angle);
                case 1
                    % Disable alpha-blending, restrict following drawing to alpha channel:
                    Screen('Blendfunction', screen.w, GL_ONE, GL_ZERO, [0 0 0 1]);
                    
                    % Clear 'dstRect' region of framebuffers alpha channel to zero:
                    Screen('FillRect', screen.w, [0 0 0 0], destRect);
                    
                    % Write value of alpha channel and RGB according to our mask
                    Screen('DrawTexture', screen.w, maskTex{maskOrder(i)},[],destRect);
                    
                    % Enable DeSTination alpha blending and reenalbe drawing to all
                    % color channels. Following drawing commands will only draw there
                    % the alpha value in the framebuffer is greater than zero, ie., in
                    % our case, inside the circular 'dst2Rect' aperture where alpha has
                    % been set to 255 by our 'FillOval' command:
                    Screen('Blendfunction', screen.w, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, [1 1 1 1]);
                    
                    % Draw 2nd texture
                    Screen('DrawTexture', screen.w, textures{imOrder(i)}, sourceRect, destRect, angle);
                    
                    % Restore alpha blending mode for next draw iteration:
                    Screen('Blendfunction', screen.w, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
                case 2
                    Screen('DrawTexture', screen.w, textures{imOrder(i)}, sourceRect, destRect, angle);
                    Screen('FillRect', screen.w, objColor, objRect);
                    
            end
            
            Screen('DrawText', screen.w, ['i = ',num2str(i)], 20,20, screen.black);
            Screen('DrawText', screen.w, ['alpha = ', num2str(alphaIn)] , 20,40, screen.black);
            % Photodiode box
            % --------------
            DisplayStimInPD2(pdStim, pd, frame, 60, screen)

            vbl = Screen('Flip', screen.w, vbl);
            if (KbCheck)
                break
            end
        end
        if (KbCheck)
            break
        end
    end
end


