function BackgroundRF(varargin)
    % if you want to change a parameter from its default value you have to
    % type 'paramToChange', newValue, ...
    % List of possible params is:
    % checkersContrast, objJitterPeriod, objSeed, stimSize, objSizeH, objSizeV,
    % objCenterXY, backContrast, backJitterPeriod, presentationLength,
    % movieDurationSecs, pdStim, debugging, barsWidth, waitframes, vbl

    global vbl screen pd pdStim
    if isempty(vbl)
        vbl=0;
    end
    
    %%%%%%%%%%%%%% Input Parser Start %%%%%%%%%%%%%%%%
    p  = inputParser;   % Create an instance of the inputParser class.
    
    p.addParamValue('objMeans', [0 63 127 255]);
    p.addParamValue('pdStim', 8, @(x) isnumeric(x));
    p.addParamValue('jumpWidth', 8, @(x) x>0);
    p.addParamValue('seed', 1, @(x) x>0);
    p.addParamValue('movieDurationSecs', 1000, @(x) x>0);
    p.addParamValue('stimSize', 768, @(x) x>0);
    p.addParamValue('checkerSize', 768, @(x) x>0);
    p.addParamValue('waitframes', 1, @(x) x>0);
    p.addParamValue('pdStim', 1, @(x) x>0);
    
    p.parse(varargin{:});
    
    objMeans = p.Results.objMeans;
    pdStim = p.Results.pdStim;
    seed = p.Results.seed;
    jumpWidth = p.Results.jumpWidth;
    movieDurationSecs = p.Results.movieDurationSecs;
    stimSize = p.Results.stimSize;
    checkerSize = p.Results.barsWidth;
    waitframes = p.Results.waitframes;
    pdStim = p.Results.waitframes;

    %%%%%%%%%%%%%% Input Parser Ends %%%%%%%%%%%%%%%%

try
     InitScreen(debugging);

    checkersN_H = ceil(stimSize/checkerSize);
    checkersN_V = checkersN_H;
    
    % Define the back Destination Rectangle
    backRect = SetRect(0,0, checkersN_H, checkersN_V)*checkerSize;
    backRect = CenterRect(backRect, screen.rect);

    % Define the object Rectangle
    objRect = SetRect(0,0, objSizeH, objSizeV);
    objRect = CenterRect(objRect, screen.rect);
    objRect = OffsetRect(objRect, objCenterXY(1), objCenterXY(2));
    
    % Define the PD box
    if exist('pd', 'var')==0 || isempty(pd)
        pd = DefinePD();
    end
    
    % We run at most 'framesN' if user doesn't abort via
    % keypress.
    framesN = uint32(movieDurationSecs*60);
    frame = 0;
    
    % init random seed generator
    S1 = RandStream('mcg16807', 'Seed',seed);
    
    % Animationloop:
    while (frame < framesN) & ~KbCheck %#ok<AND2>


        
        % CENTER REGION
        % ------ ------
        % Make and display obj texture
        backColor = (rand(S1, checkersN_H, checkersN_V)>.5)*2*screen.gray*checkersContrast...
            + screen.gray*(1-checkersContrast);
        backTex  = Screen('MakeTexture', screen.w, backColor);
        Screen('DrawTexture', screen.w, backTex, [], backRect, 0, 0);

        % After drawing, we have to discard the noise checkTexture.
        Screen('Close', backTex);

        % Display the uniform constant box in the object region
        Screen('FillRect', screen.w, objColor, objRect);
        
        % PD
        % --
        % Draw the PD box
        DisplayStimInPD2(pdStim, pd, frame, screen.rate, screen)

        
        % Flip 'waitframes' monitor refresh intervals after last redraw.
        vbl = Screen('Flip', screen.w, vbl + (waitframes - 0.5) * screen.ifi);
        frame = frame + waitframes;
    end;
    
    FinishExperiment();
    
catch
    %this "catch" section executes in case of an error in the "try" section
    %above. Importantly, it closes the onscreen window if its open.
    CleanAfterError();
    psychrethrow(psychlasterror);
end %try..catch..
end



