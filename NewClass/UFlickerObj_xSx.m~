function returnSeeds = UFlickerObj_xSx(varargin)
    global screen
    
    p=ParseInput(varargin{:});

    objContrasts = p.Results.objContrast;
    objSeeds  = p.Results.objSeeds;
    objRect = p.Results.rects;

    backContrast = p.Results.backContrast;
    backReverseFreq = p.Results.backReverseFreq;        % for reversing
    backAngle = p.Results.angle;
    backTex = p.Results.backTexture;
    
    stimSize = p.Results.stimSize;
    presentationLength = p.Results.presentationLength;
    movieDurationSecs = p.Results.movieDurationSecs;
    barsWidth = p.Results.barsWidth;
    waitframes = p.Results.waitframes;
    
    contrastsN = size(objContrasts,2);

    vbl=0;
try
    InitScreen(0);
    Add2StimLogList();
    
    % make the background texture
    if (isempty(backTex))
        clearBackTexFlag = 1;
        backTex = GetCheckersTex(stimSize/barsWidth, 1, backContrast);
        backSource = SetRect(0, 0, stimSize/barsWidth, stimSize/barsWidth);
    else
        clearBackTexFlag = 0;
    end
    
    % Define the background Destination Rectangle
    backDest1 = SetRect(0,0,stimSize, stimSize);
    backDest1 = CenterRect(backDest1, screen.rect);
    backDest2 = CenterRect(backDest1, screen.rect+barsWidth*[1 0 1 0]);
    
    % Define the PD box
    pd = DefinePD();

    updateRate = screen.rate/waitframes;
    updateTime = 1/updateRate;
    backFrames = fix(updateRate/backReverseFreq/2);

    % is background reversing or still?
    if (backFrames==inf)
        % if still, just compute number of frames per presentation
        presentationFrames = fix(updateRate*presentationLength);
        PDFrames = screen.rate/waitframes;
    else
        % if saccadding it might be necessary to change the presentation
        % Length to have an even number of backFrames
        presentationFrames = 2*backFrames*fix(updateRate*presentationLength/backFrames/2);
        PDFrames = inf;
    end
    
    presentationLength = presentationFrames/updateRate;
    movieDurationSecs = contrastsN*presentationLength* ...
        fix(movieDurationSecs/(contrastsN*presentationLength));
    presentationsN = movieDurationSecs/presentationLength;
    
    % make a random sequence of contrasts.
    S1 = RandStream('mcg16807', 'Seed',1);
    contrastSeq = ones(1, presentationsN);
    blocksN = presentationsN/contrastsN;
    for i=0:blocksN-1
        contrastSeq(i*contrastsN+1:(i+1)*contrastsN) = randperm(S1, contrastsN);
    end
    clear S1;

    % init all random streams
    S = cell(1, contrastsN);
    for i=1:contrastsN
        if size(objSeeds,2)>1
            S{i} = RandStream('mcg16807', 'Seed',objSeeds(i));
        else
            S{i} = RandStream('mcg16807', 'Seed', objSeeds);
        end
    end
    
%{
    fprintf('presentationsN=%g\tpresentationFrames=%g\tbackFrames=%g\n', ...
        presentationsN, ...
        presentationFrames, ...
        backFrames);
%}
%    test=ones(2*presentationFrames,1);
    % Animationloop:
%   Screen CloseAll    
    for presentation = 1:presentationsN
        contrastIndex = contrastSeq(presentation);
        presentationContrast = objContrasts(contrastIndex);
%{
toc 
S{contrastIndex}.State
tic
%}
        for frame=0:presentationFrames-1
            if (mod(frame, 2*backFrames)==0 || backFrames==inf)
                % reverse background
                backDest = backDest1;
            elseif (mod(frame, 2*backFrames)==backFrames-1)
                backDest = backDest2;
            end
            
            Screen('FillRect', screen.w, screen.gray, screen.rect);
            
            % Disable alpha-blending, restrict following drawing to alpha channel:
            Screen('Blendfunction', screen.w, GL_ONE, GL_ZERO, [0 0 0 1]);
            
            % Clear 'dstRect' region of framebuffers alpha channel to zero:
            %        Screen('FillRect', screen.w, [0 0 0 0], backDest);
            Screen('FillRect', screen.w, [0 0 0 0], screen.rect);
            
            % Fill circular 'dstRect' region with an alpha value of 255:
            Screen('FillOval', screen.w, [0 0 0 255], backDest);
            
            % Enable DeSTination alpha blending and reenalbe drawing to all
            % color channels. Following drawing commands will only draw there
            % the alpha value in the framebuffer is greater than zero, ie., in
            % our case, inside the circular 'dst2Rect' aperture where alpha has
            % been set to 255 by our 'FillOval' command:
            Screen('Blendfunction', screen.w, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, [1 1 1 1]);
            
            % Draw 2nd grating texture, but only inside alpha == 255 circular
            % aperture, and at an angle of 90 degrees:
            Screen('DrawTexture', screen.w, backTex{1}, backSource, backDest, backAngle,0)
            
            % Restore alpha blending mode for next draw iteration:
            Screen('Blendfunction', screen.w, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
            
            % Object Drawing
            % --------------
            if (presentationContrast==1)
                if randn(S{contrastIndex})>0
                    color=255;
                else
                    color=0;
                end
            else
                color = randn(S{contrastIndex})*presentationContrast*screen.gray+screen.gray;
            end
            % test(frame+1+(presentation-1)*presentationFrames)=color;

            Screen('FillRect', screen.w, color, objRect);
            % Photodiode box
            % --------------
            if (mod(frame, backFrames)==0 || mod(frame, PDFrames)==0)
                Screen('FillOval', screen.w, screen.white, pd);
            else
                Screen('FillOval', screen.w, color/2, pd);
            end
            
            % Flip 'waitframes' monitor refresh intervals after last redraw.
            vbl = Screen('Flip', screen.w, vbl + updateTime , 1);

            if (KbCheck)
                break
            end

        end
        if (KbCheck)
            break
        end
            
    end
    
%    SaveBinary(test, 'uint8');
    if (clearBackTexFlag)
        % After drawing, we have to discard the noise checkTexture.
        Screen('Close', backTex{1});
    end
    
    for i=1:contrastsN
        returnSeeds = S{i}.State;
    end
    
    FinishExperiment();
    
catch exception
    %this "catch" section executes in case of an error in the "try" section
    %above. Importantly, it closes the onscreen window if its open.
    CleanAfterError();
    rethrow(exception)
end %try..catch..
end

function p =  ParseInput(varargin)
    % Generates a structure with all the parameters
    % Allowed parameters are:
    %
    % objContrast, objSeed, stimSize, objSizeH, objSizeV,
    % objCenterXY, backContrast, backJitterPeriod, presentationLength,
    % movieDurationSecs, barsWidth, waitframes, vbl

    % In order to get a parameter back just use
    %   p.Resulst.parameter
    % In order to display all the parameters use
    %   disp 'List of all arguments:'
    %   disp(p.Results)
    %
    % General format to add inputs is...
    % p.addRequired('script', @ischar);
    % p.addOptional('format', 'html', ...
    %     @(x)any(strcmpi(x,{'html','ppt','xml','latex'})));
    % p.addParamValue('outputDir', pwd, @ischar);
    % p.addParamValue('maxHeight', [], @(x)x>0 && mod(x,1)==0);

    p  = inputParser;   % Create an instance of the inputParser class.

    [screenX, screenY] = SCREEN_SIZE;
    rect =  CenterRectOnPoint([0 0 12 12]*PIXELS_PER_100_MICRONS, screenX/2, screenY/2);
    rate = Screen('NominalFrameRate', max(Screen('Screens')));
    if (rate==0)
        rate=60;
    end
    
    % Object related
    p.addParamValue('objSeeds', 1, @(x) isnumeric(x) && size(x,1)==1 );
    p.addParamValue('objContrast', [.03 .06 .12 .24 1], @(x) all(all(x>=0)) && all(all(x<=1)));
    p.addParamValue('rects', rect, @(x) size(x,1)==4 || size(x,2)==4);
    
    % Background related
    p.addParamValue('backContrast', 1, @(x)x>=0 && x<=1);
    p.addParamValue('backReverseFreq', 1, @(x) x>=0);
    p.addParamValue('backTexture', [], @(x) iscell(x));
    p.addParamValue('backDest', GetRects(screenY, [screenX screenY]/2), @(x) isnumeric(x) && size(x,2)==4);
    p.addParamValue('angle', 0, @(x) isnumeric(x));
    
    % General
    p.addParamValue('stimSize', PIXELS_PER_100_MICRONS*42, @(x)x>0);
    p.addParamValue('presentationLength', 100, @(x)x>0);
    p.addParamValue('movieDurationSecs', 10000, @(x)x>0);
    p.addParamValue('barsWidth', PIXELS_PER_100_MICRONS/2, @(x)x>0);
    p.addParamValue('waitframes', round(rate/30), @(x)isnumeric(x));         

    % Call the parse method of the object to read and validate each argument in the schema:
    p.parse(varargin{:});
    
end

